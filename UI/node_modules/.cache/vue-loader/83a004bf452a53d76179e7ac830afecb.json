{"remainingRequest":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\src\\views\\ownerTransfer\\OwnerTransfer.vue?vue&type=template&id=3604fc63&scoped=true&","dependencies":[{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\src\\views\\ownerTransfer\\OwnerTransfer.vue","mtime":1628781520649},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1ib2R5IiB9LAogICAgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvZHktcmlnaHQtYmxhbmsiIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtYm9keS1tYWluIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYXlvdXQtdGl0bGUiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtdG9wIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtbmFtZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2h1ecOqzIluIHRhzIBpIHNhzIluIHRodcOqIHRoYcyAbmggdGHMgGkgc2HMiW4gc8ahzIkgaMawzIN1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtdG9vbCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUtYnV0dG9uIiB9LAogICAgICAgICAgICAgICAgW19jKCJCdXR0b25HdWlkZSIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUtYnV0dG9uIiB9LAogICAgICAgICAgICAgICAgW19jKCJCdXR0b25Ecm9wZG93bjIiLCB7IGF0dHJzOiB7IGJ1dHRvbk5hbWU6ICJUacOqzKNuIGnMgWNoIiB9IH0pXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUtYnV0dG9uIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiQnV0dG9uRHJvcGRvd24iLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgYnV0dG9uTmFtZTogIlRow6ptIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7IGJ0bkRyb3BEb3duT25DbGljazogX3ZtLmJ0bkFkZE9uQ2xpY2sgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fbSgwKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaXNPdmVyVmlldywKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJpc092ZXJWaWV3IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJvdmVydmlldyIKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl9tKDEpXQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncmlkLXRvb2wiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2Utb3ZlcnZpZXciLAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYnRuT3ZlcnZpZXdPbkNsaWNrIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGFwc2Utb3ZlcnZpZXctaWNvbiIgfSldCiAgICAgICAgICApLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncmlkLXRvb2wtbWFpbiIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyaWQtdG9vbC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidG9vbC1kcm9wZG93biIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkJ1dHRvbkRyb3Bkb3duMiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgYnV0dG9uTmFtZTogIlRoxrDMo2MgaGnDqsyjbiBoYcyAbmcgbG9hzKN0IiwKICAgICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogIiM5ZTllOWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidG9vbC1kcm9wZG93biIgfSwKICAgICAgICAgICAgICAgIFtfYygiQnV0dG9uRHJvcGRvd24yIiwgeyBhdHRyczogeyBidXR0b25OYW1lOiAiTG/Mo2MiIH0gfSldLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JpZC10b29sLXJpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWlucHV0IiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiSW5wdXRTZWFyY2giLCB7CiAgICAgICAgICAgICAgICAgICAgcmVmOiAiaW5wdXRTZWFyY2giLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlOiBfdm0uaW5wdXRTZWFyY2hWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiTmjDosyjcCB0xrDMgCBraG/MgWEgdGnMgG0ga2nDqsyBbSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2VhcmNoUmVjb3JkKF92bS5pbnB1dFNlYXJjaFZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaW5wdXRTZWFyY2hWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlucHV0U2VhcmNoVmFsdWUgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaW5wdXRTZWFyY2hWYWx1ZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bi1yZWxvYWQiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ucmVsb2FkRGF0YSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnRuLWV4Y2VsIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnRuLXNldHRpbmciIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncmlkLW1haW4iIH0sIFsKICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImdyaWQtYm9keSIgfSwKICAgICAgICAgICAgX3ZtLl9sKF92bS5yZWNvcmRzLCBmdW5jdGlvbihyZWNvcmQsIGluZGV4KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZ3JpZC1ib2R5LXJvdyIsCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgZGJsY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS51cGRhdGVSZWNvcmQocmVjb3JkLmlkKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtYmxhbmstbGVmdCIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSg0LCB0cnVlKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMSBjb2wtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MocmVjb3JkLmNvZGUpICsgIiAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMiBjb2wtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MocmVjb3JkLnRpbWUpICsgIiAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMyBjb2wtYm9keSBjb2wtcmlnaHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKHJlY29yZC5pbnZlbnRvcnlfZGF0ZSkgKyAiICIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC00IGNvbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhyZWNvcmQucHVycG9zZSkgKyAiICIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC01IGNvbC1ib2R5IGNvbC1yaWdodCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MocmVjb3JkLmNvbmNsdXNpb24pICsgIiAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1yZWNvcmQtb3B0aW9uIGNvbC1ib2R5IGNvbC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ctb3B0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm93LW9wdGlvbi1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udXBkYXRlUmVjb3JkKHJlY29yZC5yZWNvcmRJZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFPGsMyJYSAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJyZWNvcmRBY3Rpb25fIiArIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlZkluRm9yOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm93LW9wdGlvbi1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5idG5BY3Rpb25PbkNsaWNrKGluZGV4LCByZWNvcmQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWJsYW5rLXJpZ2h0IiB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIDAKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyaWQtcGFnaW5nIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyaWQtcGFnaW5nLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYWdpbmctdG90YWwiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBUw7TMiW5nIHPDtMyBOiAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogImJvbGQiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udG90YWxSZWNvcmQpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiIGJhzIluIGdoaSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFnaW5nLWRldGFpbCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicmVjb3JkLWluLXBhZ2UiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJDb21ib2JveFBsdXMiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5OiAiIiwKICAgICAgICAgICAgICAgICAgICAgIGlucHV0TGFiZWw6IHsgbGFiZWw6ICIiLCByZXF1aXJlOiAiIiB9LAogICAgICAgICAgICAgICAgICAgICAgY29tYm9ib3hWYWx1ZTogX3ZtLnZhbHVlUmVjb3JkSW5QYWdlLAogICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZTogX3ZtLnBhZ2VTaXplVGV4dAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsgcm93Q2xpY2tlZDogX3ZtLnJvd1JlY29yZEluUGFnZUNsaWNrIH0sCiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucGFnZVNpemVUZXh0LAogICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0ucGFnZVNpemVUZXh0ID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInBhZ2VTaXplVGV4dCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcmVmOiAicGFnZVByZSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFnZS1wcmUgcHJlLW5leHQiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYnRuUGFnZU9uQ2xpY2soX3ZtLnBhZ2VJbmRleEN1cnJlbnQgLSAxKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBUcsawxqHMgWMgIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICByZWY6ICJwYWdlTGVmdCIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibnVtYmVyLXBhZ2UgbnVtYmVyLXBhZ2Utc2VsZWN0IiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJ0blBhZ2VPbkNsaWNrKF92bS5wYWdlTGVmdCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0ucGFnZUxlZnQpICsgIiAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHJlZjogInBhZ2VNaWQiLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm51bWJlci1wYWdlIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJ0blBhZ2VPbkNsaWNrKF92bS5wYWdlTWlkKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5wYWdlTWlkKSArICIgIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICByZWY6ICJwYWdlUmlnaHQiLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm51bWJlci1wYWdlIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJ0blBhZ2VPbkNsaWNrKF92bS5wYWdlUmlnaHQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLnBhZ2VSaWdodCkgKyAiICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJudW1iZXItcGFnZSIgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcmVmOiAicGFnZU5leHQiLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhZ2UtbmV4dCIsCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5idG5QYWdlT25DbGljayhfdm0ucGFnZUluZGV4Q3VycmVudCArIDEpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIFNhdSAiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiQmFzZUxvYWRpbmciLCB7IHJlZjogImxvYWRpbmciIH0pLAogICAgICBfYygiUmVjb3JkQWN0aW9uIiwgewogICAgICAgIHJlZjogInJlY29yZEFjdGlvbiIsCiAgICAgICAgb246IHsgcHJvY2Vzc0FjdGlvbjogX3ZtLnByb2Nlc3NBY3Rpb24gfQogICAgICB9KSwKICAgICAgX2MoIkJhc2VDb25maXJtIiwgewogICAgICAgIHJlZjogImJhc2VDb25maXJtIiwKICAgICAgICBvbjogeyBwcm9jZXNzQWN0aW9uWWVzOiBfdm0ucHJvY2Vzc0FjdGlvblllcyB9CiAgICAgIH0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZS1ib3R0b20iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZS1ib3R0b20taWNvbiIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtYm90dG9tLWNvbnRlbnQiIH0sIFsKICAgICAgICBfdm0uX3YoIlTDosyBdCBjYcyJIGRhbmggbXXMo2MiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbm5lci1vdmVydmlldyIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctaXRlbSBvdmVydmlldy1sZWZ0IG92ZXJ2aWV3LWFjdGlvbiIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm92ZXJ2aWV3LWl0ZW0taWNvbiIgfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm92ZXJ2aWV3LWRhdGEtbnVtYmVyIiB9LCBbX3ZtLl92KCIwLDAiKV0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1vdmVydmlldyIgfSwgW192bS5fdigiTsahzKMgcXVhzIEgaGHMo24iKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctaXRlbSBvdmVydmlldy1jZW50ZXIgb3ZlcnZpZXctYWN0aW9uIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctaXRlbS1pY29uIiB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctZGF0YS1udW1iZXIiIH0sIFtfdm0uX3YoIjAsMCIpXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhYmVsLW92ZXJ2aWV3IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiVMO0zIluZyBuxqHMoyBwaGHMiWkgdHJhzIkiKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctaXRlbSBvdmVydmlldy1yaWdodCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcnZpZXctZGF0YS1udW1iZXIiIH0sIFtfdm0uX3YoIjAsMCIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1vdmVydmlldyIgfSwgWwogICAgICAgICAgX3ZtLl92KCLEkGHMgyB0aGFuaCB0b2HMgW4gKDMwIG5nYcyAeSBnw6LMgG4gxJHDonkpIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGVjay1hbGwtYXJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGVjay1hbGwtaWNvbiIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JpZC1oZWFkZXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtYmxhbmstbGVmdCBjb2wtaGVhZCIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWNoZWNrYm94IiB9LCBbCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dC1jaGVja2JveCIsCiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMSBjb2wtaGVhZCIgfSwgW192bS5fdigiTWHMgyBjaHV5w6rMiW4gxJHDtMyJaSIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTIgY29sLWhlYWQiIH0sIFsKICAgICAgICBfdm0uX3YoIlRoxqHMgGkgZ2lhbiBjaHV5w6rMiW4gxJHDtMyJaSIpCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0zIGNvbC1oZWFkIGNvbC1yaWdodCIgfSwgWwogICAgICAgIF92bS5fdigiR2lhzIEgdHJpzKMgY2jDqm5oIGzDqsyjY2giKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNCBjb2wtaGVhZCIgfSwgW192bS5fdigiR2hpIGNodcyBIildKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNSBjb2wtaGVhZCBjb2wtcmlnaHQiIH0sIFsKICAgICAgICBfdm0uX3YoIlPDtMyBIHRpw6rMgG4iKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtcmVjb3JkLW9wdGlvbiBjb2wtaGVhZCBjb2wtY2VudGVyIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJib3JkZXItbGVmdCI6ICIxcHggc29saWQgI2M3YzdjNyIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiIENoxrDMgWMgbsSDbmcgIildCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWJsYW5rLXJpZ2h0IGNvbC1oZWFkIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtY2hlY2tib3giIH0sIFsKICAgICAgX2MoImlucHV0IiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXQtY2hlY2tib3giLAogICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIgfQogICAgICB9KQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}