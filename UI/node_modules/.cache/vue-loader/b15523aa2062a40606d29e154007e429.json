{"remainingRequest":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\src\\components\\modal\\increaseAssetModal\\ModalCreate.vue?vue&type=template&id=654548ea&scoped=true&","dependencies":[{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\src\\components\\modal\\increaseAssetModal\\ModalCreate.vue","mtime":1628900445826},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DOAN\\Project\\SoTiemChungDienTu\\UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiB2LXNob3c9ImlzQWN0aXZlIiBjbGFzcz0ibW9kYWwiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtYmFja2dyb3VuZCI+PC9kaXY+CiAgICA8ZGl2PgogICAgICA8ZGl2IHYtc2hvdz0iaXNDaGFuZ2UiIGNsYXNzPSJkaXYtY29udGFpbmVyIG1vZGFsMSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYmFja2dyb3VuZCI+PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwxLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwxLWhlYWRlciI+CiAgICAgICAgICAgIEThu68gbGnhu4d1IGNoxrBhIMSRxrDhu6NjIGzGsHUKICAgICAgICAgICAgPHNwYW4gQGNsaWNrPSJoaWRlKCcnLCAnY29udGludWUnKSIKICAgICAgICAgICAgICA+PGRpdiBkYXRhLXYtMWIzNGJmMzk9IiIgY2xhc3M9Imljb24tY2FuY2VsIGJ0biBidG4tY2xvc2UiPjwvZGl2CiAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsMS1jb250ZW50IiBzdHlsZT0id2lkdGg6IDMxOHB4Ij4KICAgICAgICAgICAgROG7ryBsaeG7h3UgdGhheSDEkeG7lWksIGLhuqFuIGPDsyBtdeG7kW4gbMawdSBraMO0bmc/IDxiciAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbDEtZm9vdGVyIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgIHdpZHRoOiA4NnB4OwogICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMWJhM2M5OwogICAgICAgICAgICAgICIKICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zYXZlLWZha2UiCiAgICAgICAgICAgICAgQGNsaWNrPSJzYXZlKCkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBMxrB1CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgd2lkdGg6IDg2cHg7CiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMxYmEzYzk7CiAgICAgICAgICAgICAgIgogICAgICAgICAgICAgIGNsYXNzPSJidG4iCiAgICAgICAgICAgICAgQGNsaWNrPSJoaWRlKCkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBLaMO0bmcgbMawdQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogODZweDsganVzdGlmeS1jb250ZW50OiBjZW50ZXIiCiAgICAgICAgICAgICAgY2xhc3M9ImJ0biIKICAgICAgICAgICAgICBAY2xpY2s9ImhpZGUoJycsICdjb250aW51ZScpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgSOG7p3kgYuG7jwogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgICAgPGRpdiB2LWlmPSJmb3JtTW9kZSA9PSAnaW5zZXJ0JyIgY2xhc3M9InRpdGxlIj4KICAgICAgICAgIFRow6ptIGNo4bupbmcgdOG7qyBnaGkgdMSDbmcKICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IHYtZWxzZSBjbGFzcz0idGl0bGUiPlPhu61hIGNo4bupbmcgdOG7qyBnaGkgdMSDbmc8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXJpZ2h0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24taGVscCBidG4gYnRuLWhlbHAiIHRpdGxlPSJI4buXIHRy4bujIj48L2Rpdj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9Imljb24tY2FuY2VsIGJ0biBidG4tY2xvc2UiCiAgICAgICAgICAgIHRpdGxlPSLEkMOzbmciCiAgICAgICAgICAgIEBjbGljaz0iaGlkZSgpIgogICAgICAgICAgPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRhaW5lciBpbnB1dC1jb250YWluZXIgY29udGFpbmVyLXRvcCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtbGFiZWwiPgogICAgICAgICAgICA8bGFiZWwgZm9yPSIiPlRow7RuZyB0aW4gY2jhu6luZyB04burIDwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1ib3ggaW5wdXQtYm94Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtcm93Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1maWVsZCBhc3NldC1jb2RlIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IiIKICAgICAgICAgICAgICAgICAgPk3DoyBjaOG7qW5nIHThu6sgPHNwYW4gc3R5bGU9ImNvbG9yOiByZWQiPigqKTwvc3Bhbj48L2xhYmVsCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ik5o4bqtcCBtw6MgY2jhu6luZyB04burIgogICAgICAgICAgICAgICAgICBvbkNsaWNrPSJ0aGlzLnNlbGVjdCgpOyIKICAgICAgICAgICAgICAgICAgaWQ9ImFzc2V0SW5wdXQxIgogICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjIwIgogICAgICAgICAgICAgICAgICBjbGFzcz0icmVxdWlyZWQgaW5wdXQtb25lLXRoaXJkIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhc3NldEluY3JlYXNlLmV4aGliaXRDb2RlIgogICAgICAgICAgICAgICAgICByZWY9ImV4aGliaXRDb2RlIgogICAgICAgICAgICAgICAgICBAYmx1cj0idmFsaWRhdGVFbXR5KCdleGhpYml0Q29kZScpIgogICAgICAgICAgICAgICAgICBAa2V5dXA9InZhbGlkYXRlRW10eSgnZXhoaWJpdENvZGUnKSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhc3NldElucHV0MV93YXJuaW5nIiBjbGFzcz0idmFsaWRhdGUtd2FybmluZyI+CiAgICAgICAgICAgICAgICAgIFRow7RuZyB0aW4gYuG6r3QgYnXhu5ljIG5o4bqtcAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZHVwIgogICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogYmxvY2siCiAgICAgICAgICAgICAgICAgIGlkPSJhc3NldElucHV0MV93YXJuaW5nIgogICAgICAgICAgICAgICAgICBjbGFzcz0idmFsaWRhdGUtd2FybmluZyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgTcOjIGNo4bupbmcgdOG7qyBi4buLIHRyw7luZwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZmllbGQgZGF0ZS1wcm9jIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IiIKICAgICAgICAgICAgICAgICAgPk5nw6B5IGNo4bupbmcgdOG7qyA8c3BhbiBzdHlsZT0iY29sb3I6IHJlZCI+KCopPC9zcGFuPjwvbGFiZWwKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxEYXRlUGlja2VyCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXF1aXJlZCBpbnB1dC1zbSIKICAgICAgICAgICAgICAgICAgaW5wdXQtY2xhc3M9ImRhdGV0aW1lIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iZGQvTU0veXl5eSIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXNzZXRJbmNyZWFzZS5leGhpYml0RGF0ZSIKICAgICAgICAgICAgICAgICAgdHlwZT0iZGF0ZSIKICAgICAgICAgICAgICAgICAgcmVmPSJleGhpYml0RGF0ZSIKICAgICAgICAgICAgICAgICAgQGJsdXI9InZhbGlkYXRlRW10eSgnZXhoaWJpdERhdGUnKSIKICAgICAgICAgICAgICAgICAgZm9ybWF0PSJERC9NTS9ZWVlZIgogICAgICAgICAgICAgICAgICB2YWx1ZS10eXBlPSJZWVlZLU1NLUREIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQtZGF0ZT0iZGlzYWJsZWRBZnRlclRvZGF5IgogICAgICAgICAgICAgICAgICBAaW5wdXQtZXJyb3I9InNob3dXYXJuaW5nKCdOZ8OgeSBzYWkgxJHhu4tuaCBk4bqhbmcnLCB0cnVlKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpoZWFkZXI9InsgZW1pdCB9Ij4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXgtYnRuIG14LWJ0bi10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlbWl0KG5ldyBEYXRlKCkpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIEjDtG0gbmF5CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L0RhdGVQaWNrZXI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2YWxpZGF0ZS13YXJuaW5nIj5UaMO0bmcgdGluIGLhuq90IGJ14buZYyBuaOG6rXA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1maWVsZCBkYXRlLWluY3JlYXNlIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IiIKICAgICAgICAgICAgICAgICAgPk5nw6B5IGdoaSB0xINuZyA8c3BhbiBzdHlsZT0iY29sb3I6IHJlZCI+KCopPC9zcGFuPjwvbGFiZWwKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxEYXRlUGlja2VyCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXF1aXJlZCBpbnB1dC1zbSIKICAgICAgICAgICAgICAgICAgaW5wdXQtY2xhc3M9ImRhdGV0aW1lIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iZGQvTU0veXl5eSIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXNzZXRJbmNyZWFzZS5pbmNyZWFzZURhdGUiCiAgICAgICAgICAgICAgICAgIHR5cGU9ImRhdGUiCiAgICAgICAgICAgICAgICAgIGZvcm1hdD0iREQvTU0vWVlZWSIKICAgICAgICAgICAgICAgICAgdmFsdWUtdHlwZT0iWVlZWS1NTS1ERCIKICAgICAgICAgICAgICAgICAgOmRpc2FibGVkLWRhdGU9ImRpc2FibGVkQWZ0ZXJUb2RheSIKICAgICAgICAgICAgICAgICAgQGlucHV0LWVycm9yPSJzaG93V2FybmluZygnTmfDoHkgc2FpIMSR4buLbmggZOG6oW5nJywgdHJ1ZSkiCiAgICAgICAgICAgICAgICAgIHJlZj0iaW5jcmVhc2VEYXRlIgogICAgICAgICAgICAgICAgICBAYmx1cj0idmFsaWRhdGVFbXR5KCdpbmNyZWFzZURhdGUnKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpoZWFkZXI9InsgZW1pdCB9Ij4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXgtYnRuIG14LWJ0bi10ZXh0IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlbWl0KG5ldyBEYXRlKCkpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIEjDtG0gbmF5CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L0RhdGVQaWNrZXI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2YWxpZGF0ZS13YXJuaW5nIj5UaMO0bmcgdGluIGLhuq90IGJ14buZYyBuaOG6rXA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LXJvdyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZmllbGQgZmllbGQtbm90ZSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSIiPkdoaSBjaMO6PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTmjhuq1wIGdoaSBjaMO6IgogICAgICAgICAgICAgICAgICBvbkNsaWNrPSJ0aGlzLnNlbGVjdCgpOyIKICAgICAgICAgICAgICAgICAgaWQ9ImFzc2V0SW5wdXQxIgogICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjQwIgogICAgICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtb25lLXRoaXJkIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhc3NldEluY3JlYXNlLm5vdGUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgaWQ9ImFzc2V0SW5wdXQxX3dhcm5pbmciIGNsYXNzPSJ2YWxpZGF0ZS13YXJuaW5nIj4KICAgICAgICAgICAgVGjDtG5nIHRpbiBi4bqvdCBideG7mWMgbmjhuq1wCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGFpbmVyIGNvbnRhaW5lci1iZWxvdyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJiZWxvdy1sYWJlbCI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9IiI+VGjDtG5nIHRpbiB0w6BpIHPhuqNuIGdoaSB0xINuZyA8L2xhYmVsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItYm94IGdyaWQtYm94Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGVyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlcy1wYW5lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVzLXBhbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImlucHV0U2VhcmNoIgogICAgICAgICAgICAgICAgICAgIGlkPSJhc3NldFNlYXJjaEJveCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtc2VhcmNoIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlTDrG0ga2nhur9tLiAiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tc2VhcmNoIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVzLXBhbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJjaG9vc2VBc3NldCgpIgogICAgICAgICAgICAgICAgICAgIGlkPSJhZGQtYXNzZXQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBmZWF0dXJlcy1wYW5lLWl0ZW0iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWFkZCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWFkZCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij5DaOG7jW4gdMOgaSBz4bqjbjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1ncmlkIGdyaWQiPgogICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUtYXNzZXQiIGlkPSJ0YWJsZUFzc2V0Ij4KICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMHB4IiAvPgogICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIwcHgiIC8+CiAgICAgICAgICAgICAgICAgIDxjb2wgbWluLXdpZHRoPSIwcHgiIC8+CiAgICAgICAgICAgICAgICAgIDxjb2wgbWluLXdpZHRoPSIwcHgiIC8+CiAgICAgICAgICAgICAgICAgIDxjb2wgbWluLXdpZHRoPSIwcHgiIC8+CiAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjBweCIgLz4KICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMHB4IiAvPgogICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIwIiAvPgogICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0idGV4dC1hbGlnbjogbGVmdCI+U1RUPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgIHNvcnRQcm9wPSJjb2RlIgogICAgICAgICAgICAgICAgICAgICAgc29ydE9yZGVyPSJhc2MiCiAgICAgICAgICAgICAgICAgICAgICBpZD0iY29sdW1uQXNzZXRDb2RlIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImhvdmVyLXBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogbGVmdCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBtw6MgdMOgaSBz4bqjbgogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgICBzb3J0UHJvcD0ibmFtZSIKICAgICAgICAgICAgICAgICAgICAgIHNvcnRPcmRlcj0iYXNjIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbHVtbkFzc2V0TmFtZSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJob3Zlci1wb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtYWxpZ246IGxlZnQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgVMOqbiB0w6BpIHPhuqNuCiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgIHNvcnRQcm9wPSJkZXBhcnRtZW50IgogICAgICAgICAgICAgICAgICAgICAgc29ydE9yZGVyPSJhc2MiCiAgICAgICAgICAgICAgICAgICAgICBpZD0iY29sdW1uRGVwYXJ0bWVudCIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJob3Zlci1wb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtYWxpZ246IGxlZnQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgQuG7mSBwaOG6rW4gc+G7rSBk4bulbmcKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgICAgICAgc29ydFByb3A9InByaWNlIgogICAgICAgICAgICAgICAgICAgICAgc29ydE9yZGVyPSJhc2MiCiAgICAgICAgICAgICAgICAgICAgICBpZD0iY29sdW1uUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaG92ZXItcG9pbnRlciIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBuZ3V5w6puIGdpw6EKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iaG92ZXItcG9pbnRlciIgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgIEhNL0tNIGzFqXkga+G6vwogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJob3Zlci1wb2ludGVyIiBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgR2nDoSB0cuG7iyBjw7JuIGzhuqFpCiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBsaXN0QXNzZXRWaWV3IgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iCiAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFzc2V0Q29kZQogICAgICAgICAgICAgICAgICAgICAgICAudG9Mb2NhbGVMb3dlckNhc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihpbnB1dFNlYXJjaC50b0xvY2FsZUxvd2VyQ2FzZSgpKSAhPT0gLTEgfHwKICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYXNzZXROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvY2FsZUxvd2VyQ2FzZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIC5pbmRleE9mKGlucHV0U2VhcmNoLnRvTG9jYWxlTG93ZXJDYXNlKCkpICE9PSAtMQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxlZnQiPnt7IGluZGV4ICsgMSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9Iml0ZW0uYXNzZXRDb2RlIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0uYXNzZXRDb2RlIH19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0iaXRlbS5hc3NldE5hbWUiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1vdmVyZmxvdzogZWxsaXBzaXMiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5hc3NldE5hbWUgfX0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPSJpdGVtLmRlcGFydG1lbnROYW1lIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0uZGVwYXJ0bWVudE5hbWUgfX0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IHRleHQtb3ZlcmZsb3c6IHVuc2V0Ij4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5wdXRNb25leSIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMTRweDsKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtLm9yaWdpbmFsUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0iaXRlbS5vcmlnaW5hbFByaWNlID4gaXRlbS53ZWFyVmFsdWU/IGl0ZW0ub3JpZ2luYWxQcmljZSA6J1nDqnUgY+G6p3Ugbmd1ecOqbiBnacOhIGzhu5tuIGjGoW4gbMWpeSBr4bq/JyIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb25leT0ibW9uZXkiCiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMjAiCiAgICAgICAgICAgICAgICAgICAgICAgIEBrZXl1cD0idXBkYXRlUmVzaWR1YWwoaXRlbSwgJGV2ZW50LCAnb3JpZ2luJykiCiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9InRoaXMuc2VsZWN0KCk7IgogICAgICAgICAgICAgICAgICAgICAgICBAa2V5cHJlc3M9Im9ubHlOdW1iZXIoJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0OyB0ZXh0LW92ZXJmbG93OiB1bnNldCI+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDNweDsKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPSJ0aGlzLnNlbGVjdCgpOyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlucHV0TW9uZXkiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0ud2VhclZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9Iml0ZW0ub3JpZ2luYWxQcmljZSA+IGl0ZW0ud2VhclZhbHVlPyBpdGVtLndlYXJWYWx1ZSA6J1nDqnUgY+G6p3Ugbmd1ecOqbiBnacOhIGzhu5tuIGjGoW4gbMWpeSBr4bq/JyIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb25leT0ibW9uZXkiCiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMjAiCiAgICAgICAgICAgICAgICAgICAgICAgIEBrZXl1cD0idXBkYXRlUmVzaWR1YWwoaXRlbSwgJGV2ZW50LCAnd2VhcicpIgogICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJvbmx5TnVtYmVyKCRldmVudCkiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlcy12YWx1ZSBuby1ib3JkZXItcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIgogICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPSJpdGVtLnJlc1ZhbHVlIHwgZm9ybWF0TW9uZXkoaXRlbS5yZXNWYWx1ZSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5yZXNWYWx1ZSB8IGZvcm1hdE1vbmV5KGl0ZW0ucmVzVmFsdWUpIH19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZGVsZXRlSXRlbShpdGVtLmFzc2V0SWQpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXYtYmRhZWExMmM9IiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tcmVmcmVzaC10aW1lMSBidG4gYnRuLWNvbmZpcm0tZGVsZXRlMSIKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IljDs2EiCiAgICAgICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9Imxpc3RBc3NldFZpZXcubGVuZ3RoID09IDAiIGNsYXNzPSJlbXR5LXRleHQiPgogICAgICAgICAgICAgICAgICAgIEtow7RuZyBjw7MgZOG7ryBsaeG7h3UgdMOgaSBz4bqjbiBnaGkgdMSDbmcKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3Rib2R5PgoKICAgICAgICAgICAgICAgIDwhLS0gPGRpdiB2LXNob3c9ImdldEVtdHkiIGNsYXNzPSJsb2FkaW5nLWVtdHkiPktow7RuZyBjw7MgZOG7ryBsaeG7h3U8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgPC90YWJsZT4KCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3R4LW1lbnUiIGlkPSJjdHhNZW51Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0eC1tZW51LWl0ZW0iIEBjbGljaz0ic2hvd0RpYWxvZygnaW5zZXJ0JywgMCkiPgogICAgICAgICAgICAgICAgICBUaMOqbQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdHgtbWVudS1pdGVtIgogICAgICAgICAgICAgICAgICBAY2xpY2s9InNob3dEaWFsb2coJ3VwZGF0ZScsIGxpc3RTZWxlY3RSb3dbMF0pIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBT4butYQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGlkPSJwcmV2ZW50TGVmdENsaWNrIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY3R4LW1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzaG93RGVsZXRlRGlhbG9nKGxpc3RTZWxlY3RSb3dbMF0pIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBYw7NhCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1bWFyeSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VtYXJ5LXRleHQiPgogICAgICAgICAgICAgICAgVOG7lW5nIHPhu5E6IHt7IGxpc3RBc3NldFZpZXcubGVuZ3RoIH19IHTDoGkgc+G6o24KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGlkPSJhc3NldElucHV0MV93YXJuaW5nIiBjbGFzcz0idmFsaWRhdGUtd2FybmluZyI+CiAgICAgICAgICAgIFRow7RuZyB0aW4gYuG6r3QgYnXhu5ljIG5o4bqtcAogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJmb290ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG4tY2FuY2VsIiB0YWJpbmRleD0iMCIgQGNsaWNrPSJoaWRlKCdjbG9zZScpIj4KICAgICAgICAgIEjhu6d5CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG4tc2F2ZSIgdGFiaW5kZXg9IjAiIEBjbGljaz0ic2F2ZSgnYWxsJykiPkzGsHU8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxCYXNlTG9hZGluZyByZWY9IkJhc2VMb2FkaW5nX3JlZiIgLz4KICAgIDxBc3NldE1hbmFnZW1lbnQKICAgICAgOmxpc3RBc3NldFZpZXc9Imxpc3RBc3NldFZpZXciCiAgICAgIEBsaXN0QXNzZXRWaWV3PSJnZXRBc3NldFZpZXciCiAgICAgIHJlZj0iY2hvb3NlQXNzZXRfcmVmIgogICAgLz4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}